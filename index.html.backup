<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GPX Track Viewer</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <header>
            <h1>GPX Track Viewer</h1>
            <p>Upload a GPX file to visualize your track on Google Maps with directional indicators</p>
        </header>
        
        <div class="controls">
            <div class="file-upload">
                <input type="file" id="gpxFile" accept=".gpx" />
                <label for="gpxFile" class="upload-btn">Choose GPX File</label>
            </div>
            
            <div class="playback-controls" id="playbackControls" style="display: none;">
                <button id="playBtn" class="control-btn">▶ Play</button>
                <button id="pauseBtn" class="control-btn">⏸ Pause</button>
                <button id="resetBtn" class="control-btn">↻ Reset</button>
                <div class="speed-control">
                    <label for="speedSlider">Speed:</label>
                    <input type="range" id="speedSlider" min="1" max="10" value="5" step="1">
                    <span id="speedValue">5x</span>
                </div>
                <div class="progress">
                    <div class="progress-bar">
                        <div id="progressFill" class="progress-fill"></div>
                    </div>
                    <span id="progressText">0%</span>
                </div>
            </div>
        </div>
        
        <div class="map-info">
            <div id="trackInfo" class="track-info" style="display: none;">
                <h3>Track Information</h3>
                <div class="info-grid">
                    <div><strong>Total Points:</strong> <span id="totalPoints">-</span></div>
                    <div><strong>Distance:</strong> <span id="totalDistance">-</span></div>
                    <div><strong>Duration:</strong> <span id="totalDuration">-</span></div>
                    <div><strong>Current Point:</strong> <span id="currentPoint">-</span></div>
                </div>
            </div>
        </div>
        
        <div id="map" class="map-container"></div>
        
        <div class="instructions">
            <h3>Instructions:</h3>
            <ul>
                <li>Upload a GPX file using the file picker above</li>
                <li>The track will be displayed on the map with directional arrows</li>
                <li>Use the playback controls to animate the route progression</li>
                <li>Adjust the speed slider to control animation speed</li>
                <li>Click on track points to see detailed information</li>
            </ul>
        </div>
    </div>
    
    <script>
        // Initialize the application when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });
        
        function initializeApp() {
            // Load Google Maps API
            const script = document.createElement('script');
            script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyA4dgpQZBaVw0DMJHt-pSXstlRqVe-GSOY&callback=initMap&libraries=geometry';
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
        }
        
        // Global variables
        let map;
        let gpxData = null;
        let trackPolyline = null;
        let directionMarkers = [];
        let currentMarker = null;
        let animationInterval = null;
        let currentPointIndex = 0;
        let isPlaying = false;
        
        // GPX Parser
        function parseGPX(gpxText) {
            const parser = new DOMParser();
            const xmlDoc = parser.parseFromString(gpxText, 'text/xml');
            
            // Check for parsing errors
            if (xmlDoc.getElementsByTagName('parsererror').length > 0) {
                throw new Error('Invalid GPX file format');
            }
            
            const trackPoints = [];
            const trkpts = xmlDoc.getElementsByTagName('trkpt');
            
            if (trkpts.length === 0) {
                throw new Error('No track points found in GPX file');
            }
            
            for (let i = 0; i < trkpts.length; i++) {
                const trkpt = trkpts[i];
                const lat = parseFloat(trkpt.getAttribute('lat'));
                const lon = parseFloat(trkpt.getAttribute('lon'));
                
                const timeElement = trkpt.getElementsByTagName('time')[0];
                const time = timeElement ? new Date(timeElement.textContent) : null;
                
                const eleElement = trkpt.getElementsByTagName('ele')[0];
                const elevation = eleElement ? parseFloat(eleElement.textContent) : null;
                
                trackPoints.push({
                    lat: lat,
                    lon: lon,
                    time: time,
                    elevation: elevation
                });
            }
            
            // Calculate total distance and duration
            let totalDistance = 0;
            let totalDuration = 0;
            
            for (let i = 1; i < trackPoints.length; i++) {
                const distance = calculateDistance(
                    trackPoints[i-1].lat, trackPoints[i-1].lon,
                    trackPoints[i].lat, trackPoints[i].lon
                );
                totalDistance += distance;
                
                if (trackPoints[i].time && trackPoints[i-1].time) {
                    totalDuration = (trackPoints[trackPoints.length-1].time - trackPoints[0].time) / 1000;
                }
            }
            
            return {
                trackPoints: trackPoints,
                totalDistance: totalDistance,
                totalDuration: totalDuration
            };
        }
        
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Earth's radius in kilometers
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = 
                Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return R * c;
        }
        
        function initMap() {
            // Initialize Google Map
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 13,
                center: { lat: 37.7749, lng: -122.4194 }, // Default to San Francisco
                mapTypeId: 'terrain'
            });
            
            // Set up file upload handler
            document.getElementById('gpxFile').addEventListener('change', handleFileUpload);
            
            // Set up playback controls
            document.getElementById('playBtn').addEventListener('click', startAnimation);
            document.getElementById('pauseBtn').addEventListener('click', pauseAnimation);
            document.getElementById('resetBtn').addEventListener('click', resetAnimation);
            document.getElementById('speedSlider').addEventListener('input', updateSpeed);
        }
        
        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (file && file.name.endsWith('.gpx')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        gpxData = parseGPX(e.target.result);
                        displayTrack();
                        showTrackInfo();
                        document.getElementById('playbackControls').style.display = 'block';
                    } catch (error) {
                        alert('Error parsing GPX file: ' + error.message);
                    }
                };
                reader.readAsText(file);
            } else {
                alert('Please select a valid GPX file.');
            }
        }
        
        function displayTrack() {
            if (!gpxData || !gpxData.trackPoints.length) return;
            
            // Clear previous track
            clearTrack();
            
            // Create polyline for the track
            const path = gpxData.trackPoints.map(point => ({
                lat: point.lat,
                lng: point.lon
            }));
            
            trackPolyline = new google.maps.Polyline({
                path: path,
                geodesic: true,
                strokeColor: '#FF0000',
                strokeOpacity: 1.0,
                strokeWeight: 3
            });
            
            trackPolyline.setMap(map);
            
            // Add direction arrows
            addDirectionArrows();
            
            // Fit map to track bounds
            const bounds = new google.maps.LatLngBounds();
            path.forEach(point => bounds.extend(point));
            map.fitBounds(bounds);
            
            // Add start and end markers
            addStartEndMarkers();
        }
        
        function addDirectionArrows() {
            const points = gpxData.trackPoints;
            const arrowInterval = Math.max(1, Math.floor(points.length / 20)); // Show ~20 arrows max
            
            for (let i = 0; i < points.length - 1; i += arrowInterval) {
                const start = new google.maps.LatLng(points[i].lat, points[i].lon);
                const end = new google.maps.LatLng(points[i + 1].lat, points[i + 1].lon);
                
                const heading = google.maps.geometry.spherical.computeHeading(start, end);
                
                const arrowMarker = new google.maps.Marker({
                    position: start,
                    map: map,
                    icon: {
                        path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,
                        scale: 3,
                        fillColor: '#FF0000',
                        fillOpacity: 0.8,
                        strokeColor: '#FFFFFF',
                        strokeWeight: 1,
                        rotation: heading
                    },
                    title: 'Point ' + (i + 1)
                });
                
                directionMarkers.push(arrowMarker);
            }
        }
        
        function addStartEndMarkers() {
            const points = gpxData.trackPoints;
            if (points.length === 0) return;
            
            // Start marker
            new google.maps.Marker({
                position: { lat: points[0].lat, lng: points[0].lon },
                map: map,
                icon: {
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 8,
                    fillColor: '#00FF00',
                    fillOpacity: 1,
                    strokeColor: '#FFFFFF',
                    strokeWeight: 2
                },
                title: 'Start'
            });
            
            // End marker
            const lastPoint = points[points.length - 1];
            new google.maps.Marker({
                position: { lat: lastPoint.lat, lng: lastPoint.lon },
                map: map,
                icon: {
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 8,
                    fillColor: '#FF0000',
                    fillOpacity: 1,
                    strokeColor: '#FFFFFF',
                    strokeWeight: 2
                },
                title: 'End'
            });
        }
        
        function clearTrack() {
            if (trackPolyline) {
                trackPolyline.setMap(null);
                trackPolyline = null;
            }
            
            directionMarkers.forEach(marker => marker.setMap(null));
            directionMarkers = [];
            
            if (currentMarker) {
                currentMarker.setMap(null);
                currentMarker = null;
            }
        }
        
        function showTrackInfo() {
            if (!gpxData) return;
            
            document.getElementById('totalPoints').textContent = gpxData.trackPoints.length;
            document.getElementById('totalDistance').textContent = gpxData.totalDistance.toFixed(2) + ' km';
            document.getElementById('totalDuration').textContent = formatDuration(gpxData.totalDuration);
            document.getElementById('trackInfo').style.display = 'block';
        }
        
        function startAnimation() {
            if (!gpxData || isPlaying) return;
            
            isPlaying = true;
            const speed = parseInt(document.getElementById('speedSlider').value);
            const interval = Math.max(50, 500 / speed); // Minimum 50ms interval
            
            animationInterval = setInterval(() => {
                if (currentPointIndex >= gpxData.trackPoints.length) {
                    pauseAnimation();
                    return;
                }
                
                showCurrentPoint();
                currentPointIndex++;
                updateProgress();
            }, interval);
        }
        
        function pauseAnimation() {
            isPlaying = false;
            if (animationInterval) {
                clearInterval(animationInterval);
                animationInterval = null;
            }
        }
        
        function resetAnimation() {
            pauseAnimation();
            currentPointIndex = 0;
            if (currentMarker) {
                currentMarker.setMap(null);
                currentMarker = null;
            }
            updateProgress();
        }
        
        function showCurrentPoint() {
            if (!gpxData || currentPointIndex >= gpxData.trackPoints.length) return;
            
            const point = gpxData.trackPoints[currentPointIndex];
            
            // Remove previous current marker
            if (currentMarker) {
                currentMarker.setMap(null);
            }
            
            // Add new current marker
            currentMarker = new google.maps.Marker({
                position: { lat: point.lat, lng: point.lon },
                map: map,
                icon: {
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: 6,
                    fillColor: '#0000FF',
                    fillOpacity: 1,
                    strokeColor: '#FFFFFF',
                    strokeWeight: 2
                },
                title: 'Current Position - Point ' + (currentPointIndex + 1)
            });
        }
        
        function updateProgress() {
            if (!gpxData) return;
            
            const progress = (currentPointIndex / gpxData.trackPoints.length) * 100;
            document.getElementById('progressFill').style.width = progress + '%';
            document.getElementById('progressText').textContent = Math.round(progress) + '%';
            document.getElementById('currentPoint').textContent = (currentPointIndex + 1) + ' / ' + gpxData.trackPoints.length;
        }
        
        function updateSpeed() {
            const speed = document.getElementById('speedSlider').value;
            document.getElementById('speedValue').textContent = speed + 'x';
            
            if (isPlaying) {
                pauseAnimation();
                startAnimation();
            }
        }
        
        function formatDuration(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = Math.floor(seconds % 60);
            
            if (hours > 0) {
                return hours + 'h ' + minutes + 'm ' + secs + 's';
            } else {
                return minutes + 'm ' + secs + 's';
            }
        }
    </script>
</body>
</html>
